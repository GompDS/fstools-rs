/* automatically generated by rust-bindgen 0.69.4 */

pub const __EXCEPTION_H: u32 = 1;
pub const _CPP_CPPCONFIG_WRAPPER: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
pub const _GLIBCXX_RELEASE: u32 = 13;
pub const __GLIBCXX__: u32 = 20240316;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
pub const _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED: u32 = 1;
pub const _GLIBCXX_VERBOSE_ASSERT: u32 = 1;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
pub const _GLIBCXX_OS_DEFINES: u32 = 1;
pub const __NO_CTYPE: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 1;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 38;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const _GLIBCXX_HAVE_FLOAT128_MATH: u32 = 1;
pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
pub const _GLIBCXX_USE_STD_SPEC_FUNCS: u32 = 1;
pub const _GLIBCXX_FAST_MATH: u32 = 0;
pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_SAME: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
pub const _PSTL_VERSION: u32 = 12000;
pub const _PSTL_VERSION_MAJOR: u32 = 12;
pub const _PSTL_VERSION_MINOR: u32 = 0;
pub const _PSTL_VERSION_PATCH: u32 = 0;
pub const _PSTL_USAGE_WARNINGS: u32 = 0;
pub const _PSTL_UDR_PRESENT: u32 = 0;
pub const _PSTL_PRAGMA_LOCATION: &[u8; 26] = b" [Parallel STL message]: \0";
pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
pub const _GLIBCXX_HAVE_ARC4RANDOM: u32 = 1;
pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
pub const _GLIBCXX_HAVE_COSF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
pub const _GLIBCXX_HAVE_COSL: u32 = 1;
pub const _GLIBCXX_HAVE_DECL_STRNLEN: u32 = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
pub const _GLIBCXX_HAVE_DIRFD: u32 = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_FDOPENDIR: u32 = 1;
pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
pub const _GLIBCXX_HAVE_GETENTROPY: u32 = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
pub const _GLIBCXX_HAVE_GETS: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
pub const _GLIBCXX_HAVE_LINK: u32 = 1;
pub const _GLIBCXX_HAVE_LINK_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
pub const _GLIBCXX_HAVE_MODF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
pub const _GLIBCXX_HAVE_OPENAT: u32 = 1;
pub const _GLIBCXX_HAVE_POLL: u32 = 1;
pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
pub const _GLIBCXX_HAVE_POWF: u32 = 1;
pub const _GLIBCXX_HAVE_POWL: u32 = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SECURE_GETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
pub const _GLIBCXX_HAVE_SINF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
pub const _GLIBCXX_HAVE_SINL: u32 = 1;
pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
pub const _GLIBCXX_HAVE_STACKTRACE: u32 = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_MMAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
pub const _GLIBCXX_HAVE_TANF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
pub const _GLIBCXX_HAVE_TANL: u32 = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
pub const _GLIBCXX_HAVE_TLS: u32 = 1;
pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNLINKAT: u32 = 1;
pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const _GLIBCXX_LT_OBJDIR: &[u8; 7] = b".libs/\0";
pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15] = b"package-unused\0";
pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30] = b"package-unused version-unused\0";
pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10] = b"libstdc++\0";
pub const _GLIBCXX_PACKAGE_URL: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15] = b"version-unused\0";
pub const _GLIBCXX_STDC_HEADERS: u32 = 1;
pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
pub const _GLIBCXX_CAN_ALIGNAS_DESTRUCTIVE_SIZE: u32 = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
pub const _GLIBCXX_RES_LIMITS: u32 = 1;
pub const _GLIBCXX_STDIO_EOF: i32 = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
pub const _GLIBCXX_SYMVER: u32 = 1;
pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
pub const _GLIBCXX_USE_C99: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
pub const _GLIBCXX_USE_CHDIR: u32 = 1;
pub const _GLIBCXX_USE_CHMOD: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
pub const _GLIBCXX_USE_FSEEKO_FTELLO: u32 = 1;
pub const _GLIBCXX_USE_GETCWD: u32 = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
pub const _GLIBCXX_USE_INIT_PRIORITY_ATTRIBUTE: u32 = 1;
pub const _GLIBCXX_USE_LFS: u32 = 1;
pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
pub const _GLIBCXX_USE_LSTAT: u32 = 1;
pub const _GLIBCXX_USE_MKDIR: u32 = 1;
pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
pub const _GLIBCXX_USE_NLS: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_MUTEX_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
pub const _GLIBCXX_USE_REALPATH: u32 = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20: u32 = 1;
pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T: u32 = 1;
pub const _GLIBCXX_USE_UTIME: u32 = 1;
pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
pub const _GLIBCXX_VERBOSE: u32 = 1;
pub const _GLIBCXX_X86_RDRAND: u32 = 1;
pub const _GLIBCXX_X86_RDSEED: u32 = 1;
pub const _GLIBCXX_ZONEINFO_DIR: &[u8; 20] = b"/usr/share/zoneinfo\0";
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
pub const _HASH_BYTES_H: u32 = 1;
pub const __GXX_MERGED_TYPEINFO_NAMES: u32 = 0;
pub const __GXX_TYPEINFO_EQUALITY_INLINE: u32 = 1;
pub const OODLE2_PUBLIC_HEADER: u32 = 1;
pub const OODLE2BASE_PUBLIC_HEADER: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const OOCOPYRIGHT: &[u8; 46] = b"Copyright (C) 1994-2024, Epic Games Tools LLC\0";
pub const OODLE2_PUBLIC_CORE_DEFINES: u32 = 1;
pub const NULL: u32 = 0;
pub const OODLE_JOB_MAX_DEPENDENCIES: u32 = 4;
pub const OODLE_JOB_NULL_HANDLE: u32 = 0;
pub const OODLE2_VERSION_MAJOR: u32 = 9;
pub const OODLE2_VERSION_MINOR: u32 = 12;
pub const OodleVersion: &[u8; 7] = b"2.9.12\0";
pub const OODLELZ_LOCALDICTIONARYSIZE_MAX: u32 = 1073741824;
pub const OODLELZ_SPACESPEEDTRADEOFFBYTES_DEFAULT: u32 = 256;
pub const OODLELZ_BLOCK_LEN: u32 = 262144;
pub const OODLELZ_BLOCK_MAXIMUM_EXPANSION: u32 = 2;
pub const OODLELZ_BLOCK_MAX_COMPLEN: u32 = 262146;
pub const OODLELZ_QUANTUM_LEN: u32 = 16384;
pub const OODLELZ_QUANTUM_MAXIMUM_EXPANSION: u32 = 5;
pub const OODLELZ_QUANTUM_MAX_COMPLEN: u32 = 16389;
pub const OODLELZ_SEEKCHUNKLEN_MIN: u32 = 262144;
pub const OODLELZ_SEEKCHUNKLEN_MAX: u32 = 536870912;
pub const OODLELZ_FAILED: u32 = 0;
pub const OODLELZ_SEEKPOINTCOUNT_DEFAULT: u32 = 16;
pub const OODLELZ_SCRATCH_MEM_NO_BOUND: i32 = -1;
pub const OODLECORE_PLUGIN_JOB_MAX_DEPENDENCIES: u32 = 4;
pub type std_nullptr_t = *const ::std::os::raw::c_void;
#[repr(C)]
pub struct std_exception__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_exception {
    pub vtable_: *const std_exception__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_std_exception() {
    assert_eq!(
        ::std::mem::size_of::<std_exception>(),
        8usize,
        concat!("Size of: ", stringify!(std_exception))
    );
    assert_eq!(
        ::std::mem::align_of::<std_exception>(),
        8usize,
        concat!("Alignment of ", stringify!(std_exception))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt9exceptionD1Ev"]
    pub fn std_exception_exception_destructor(this: *mut std_exception);
}
#[repr(C)]
pub struct std_type_info__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_type_info {
    pub vtable_: *const std_type_info__bindgen_vtable,
    pub __name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_std_type_info() {
    const UNINIT: ::std::mem::MaybeUninit<std_type_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<std_type_info>(),
        16usize,
        concat!("Size of: ", stringify!(std_type_info))
    );
    assert_eq!(
        ::std::mem::align_of::<std_type_info>(),
        8usize,
        concat!("Alignment of ", stringify!(std_type_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(std_type_info),
            "::",
            stringify!(__name)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt9type_infoD1Ev"]
    pub fn std_type_info_type_info_destructor(this: *mut std_type_info);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_cast {
    pub _base: std_exception,
}
#[test]
fn bindgen_test_layout_std_bad_cast() {
    assert_eq!(
        ::std::mem::size_of::<std_bad_cast>(),
        8usize,
        concat!("Size of: ", stringify!(std_bad_cast))
    );
    assert_eq!(
        ::std::mem::align_of::<std_bad_cast>(),
        8usize,
        concat!("Alignment of ", stringify!(std_bad_cast))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt8bad_castD1Ev"]
    pub fn std_bad_cast_bad_cast_destructor(this: *mut std_bad_cast);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_typeid {
    pub _base: std_exception,
}
#[test]
fn bindgen_test_layout_std_bad_typeid() {
    assert_eq!(
        ::std::mem::size_of::<std_bad_typeid>(),
        8usize,
        concat!("Size of: ", stringify!(std_bad_typeid))
    );
    assert_eq!(
        ::std::mem::align_of::<std_bad_typeid>(),
        8usize,
        concat!("Alignment of ", stringify!(std_bad_typeid))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt10bad_typeidD1Ev"]
    pub fn std_bad_typeid_bad_typeid_destructor(this: *mut std_bad_typeid);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cxxabiv1___class_type_info {
    _unused: [u8; 0],
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type OO_S8 = i8;
pub type OO_U8 = u8;
pub type OO_S16 = i16;
pub type OO_U16 = u16;
pub type OO_S32 = i32;
pub type OO_U32 = u32;
pub type OO_S64 = i64;
pub type OO_U64 = u64;
pub type OO_F32 = f32;
pub type OO_F64 = f64;
pub type OO_SINTa = isize;
pub type OO_UINTa = usize;
pub type OO_BOOL = i32;
pub type t_OodleFPVoidVoid = ::std::option::Option<unsafe extern "C" fn()>;
pub type t_OodleFPVoidVoidStar =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OodleLZ_Verbosity {
    OodleLZ_Verbosity_None = 0,
    OodleLZ_Verbosity_Minimal = 1,
    OodleLZ_Verbosity_Some = 2,
    OodleLZ_Verbosity_Lots = 3,
    OodleLZ_Verbosity_Force32 = 1073741824,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OodleLZ_Compressor {
    OodleLZ_Compressor_Invalid = -1,
    OodleLZ_Compressor_None = 3,
    OodleLZ_Compressor_Kraken = 8,
    OodleLZ_Compressor_Leviathan = 13,
    OodleLZ_Compressor_Mermaid = 9,
    OodleLZ_Compressor_Selkie = 11,
    OodleLZ_Compressor_Hydra = 12,
    OodleLZ_Compressor_Count = 14,
    OodleLZ_Compressor_Force32 = 1073741824,
}
pub const OodleLZ_PackedRawOverlap_OodleLZ_PackedRawOverlap_No: OodleLZ_PackedRawOverlap = 0;
pub const OodleLZ_PackedRawOverlap_OodleLZ_PackedRawOverlap_Yes: OodleLZ_PackedRawOverlap = 1;
pub const OodleLZ_PackedRawOverlap_OodleLZ_PackedRawOverlap_Force32: OodleLZ_PackedRawOverlap =
    1073741824;
pub type OodleLZ_PackedRawOverlap = ::std::os::raw::c_uint;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OodleLZ_CheckCRC {
    OodleLZ_CheckCRC_No = 0,
    OodleLZ_CheckCRC_Yes = 1,
    OodleLZ_CheckCRC_Force32 = 1073741824,
}
pub const OodleLZ_Profile_OodleLZ_Profile_Main: OodleLZ_Profile = 0;
pub const OodleLZ_Profile_OodleLZ_Profile_Reduced: OodleLZ_Profile = 1;
pub const OodleLZ_Profile_OodleLZ_Profile_Force32: OodleLZ_Profile = 1073741824;
pub type OodleLZ_Profile = ::std::os::raw::c_uint;
pub const OodleDecompressCallbackRet_OodleDecompressCallbackRet_Continue:
    OodleDecompressCallbackRet = 0;
pub const OodleDecompressCallbackRet_OodleDecompressCallbackRet_Cancel: OodleDecompressCallbackRet =
    1;
pub const OodleDecompressCallbackRet_OodleDecompressCallbackRet_Invalid:
    OodleDecompressCallbackRet = 2;
pub const OodleDecompressCallbackRet_OodleDecompressCallbackRet_Force32:
    OodleDecompressCallbackRet = 1073741824;
pub type OodleDecompressCallbackRet = ::std::os::raw::c_uint;
pub type OodleDecompressCallback = ::std::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::std::os::raw::c_void,
        rawBuf: *const OO_U8,
        rawLen: OO_SINTa,
        compBuf: *const OO_U8,
        compBufferSize: OO_SINTa,
        rawDone: OO_SINTa,
        compUsed: OO_SINTa,
    ) -> OodleDecompressCallbackRet,
>;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_None: OodleLZ_CompressionLevel = 0;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_SuperFast: OodleLZ_CompressionLevel = 1;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_VeryFast: OodleLZ_CompressionLevel = 2;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Fast: OodleLZ_CompressionLevel = 3;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Normal: OodleLZ_CompressionLevel = 4;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Optimal1: OodleLZ_CompressionLevel = 5;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Optimal2: OodleLZ_CompressionLevel = 6;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Optimal3: OodleLZ_CompressionLevel = 7;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Optimal4: OodleLZ_CompressionLevel = 8;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Optimal5: OodleLZ_CompressionLevel = 9;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_HyperFast1: OodleLZ_CompressionLevel =
    -1;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_HyperFast2: OodleLZ_CompressionLevel =
    -2;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_HyperFast3: OodleLZ_CompressionLevel =
    -3;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_HyperFast4: OodleLZ_CompressionLevel =
    -4;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_HyperFast: OodleLZ_CompressionLevel =
    -1;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Optimal: OodleLZ_CompressionLevel = 6;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Max: OodleLZ_CompressionLevel = 9;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Min: OodleLZ_CompressionLevel = -4;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Force32: OodleLZ_CompressionLevel =
    1073741824;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Invalid: OodleLZ_CompressionLevel =
    1073741824;
pub type OodleLZ_CompressionLevel = ::std::os::raw::c_int;
pub const OodleLZ_Jobify_OodleLZ_Jobify_Default: OodleLZ_Jobify = 0;
pub const OodleLZ_Jobify_OodleLZ_Jobify_Disable: OodleLZ_Jobify = 1;
pub const OodleLZ_Jobify_OodleLZ_Jobify_Normal: OodleLZ_Jobify = 2;
pub const OodleLZ_Jobify_OodleLZ_Jobify_Aggressive: OodleLZ_Jobify = 3;
pub const OodleLZ_Jobify_OodleLZ_Jobify_Count: OodleLZ_Jobify = 4;
pub const OodleLZ_Jobify_OodleLZ_Jobify_Force32: OodleLZ_Jobify = 1073741824;
pub type OodleLZ_Jobify = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct OodleLZ_CompressOptions {
    pub unused_was_verbosity: OO_U32,
    pub minMatchLen: OO_S32,
    pub seekChunkReset: OO_BOOL,
    pub seekChunkLen: OO_S32,
    pub profile: OodleLZ_Profile,
    pub dictionarySize: OO_S32,
    pub spaceSpeedTradeoffBytes: OO_S32,
    pub unused_was_maxHuffmansPerChunk: OO_S32,
    pub sendQuantumCRCs: OO_BOOL,
    pub maxLocalDictionarySize: OO_S32,
    pub makeLongRangeMatcher: OO_BOOL,
    pub matchTableSizeLog2: OO_S32,
    pub jobify: OodleLZ_Jobify,
    pub jobifyUserPtr: *mut ::std::os::raw::c_void,
    pub farMatchMinLen: OO_S32,
    pub farMatchOffsetLog2: OO_S32,
    pub reserved: [OO_U32; 4usize],
}
#[test]
fn bindgen_test_layout_OodleLZ_CompressOptions() {
    const UNINIT: ::std::mem::MaybeUninit<OodleLZ_CompressOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OodleLZ_CompressOptions>(),
        84usize,
        concat!("Size of: ", stringify!(OodleLZ_CompressOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<OodleLZ_CompressOptions>(),
        1usize,
        concat!("Alignment of ", stringify!(OodleLZ_CompressOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused_was_verbosity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(unused_was_verbosity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minMatchLen) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(minMatchLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seekChunkReset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(seekChunkReset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seekChunkLen) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(seekChunkLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profile) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(profile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dictionarySize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(dictionarySize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spaceSpeedTradeoffBytes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(spaceSpeedTradeoffBytes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).unused_was_maxHuffmansPerChunk) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(unused_was_maxHuffmansPerChunk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sendQuantumCRCs) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(sendQuantumCRCs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxLocalDictionarySize) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(maxLocalDictionarySize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).makeLongRangeMatcher) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(makeLongRangeMatcher)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).matchTableSizeLog2) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(matchTableSizeLog2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jobify) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(jobify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jobifyUserPtr) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(jobifyUserPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).farMatchMinLen) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(farMatchMinLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).farMatchOffsetLog2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(farMatchOffsetLog2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(reserved)
        )
    );
}
impl OodleLZ_Decode_ThreadPhase {
    pub const OodleLZ_Decode_Unthreaded: OodleLZ_Decode_ThreadPhase =
        OodleLZ_Decode_ThreadPhase::OodleLZ_Decode_ThreadPhaseAll;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OodleLZ_Decode_ThreadPhase {
    OodleLZ_Decode_ThreadPhase1 = 1,
    OodleLZ_Decode_ThreadPhase2 = 2,
    OodleLZ_Decode_ThreadPhaseAll = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OodleLZ_FuzzSafe {
    OodleLZ_FuzzSafe_No = 0,
    OodleLZ_FuzzSafe_Yes = 1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct OodleLZ_DecodeSome_Out {
    pub decodedCount: OO_S32,
    pub compBufUsed: OO_S32,
    pub curQuantumRawLen: OO_S32,
    pub curQuantumCompLen: OO_S32,
}
#[test]
fn bindgen_test_layout_OodleLZ_DecodeSome_Out() {
    const UNINIT: ::std::mem::MaybeUninit<OodleLZ_DecodeSome_Out> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OodleLZ_DecodeSome_Out>(),
        16usize,
        concat!("Size of: ", stringify!(OodleLZ_DecodeSome_Out))
    );
    assert_eq!(
        ::std::mem::align_of::<OodleLZ_DecodeSome_Out>(),
        1usize,
        concat!("Alignment of ", stringify!(OodleLZ_DecodeSome_Out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decodedCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_DecodeSome_Out),
            "::",
            stringify!(decodedCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compBufUsed) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_DecodeSome_Out),
            "::",
            stringify!(compBufUsed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curQuantumRawLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_DecodeSome_Out),
            "::",
            stringify!(curQuantumRawLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curQuantumCompLen) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_DecodeSome_Out),
            "::",
            stringify!(curQuantumCompLen)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct OodleLZ_SeekTable {
    pub compressor: OodleLZ_Compressor,
    pub seekChunksIndependent: OO_BOOL,
    pub totalRawLen: OO_S64,
    pub totalCompLen: OO_S64,
    pub numSeekChunks: OO_S32,
    pub seekChunkLen: OO_S32,
    pub seekChunkCompLens: *mut OO_U32,
    pub rawCRCs: *mut OO_U32,
}
#[test]
fn bindgen_test_layout_OodleLZ_SeekTable() {
    const UNINIT: ::std::mem::MaybeUninit<OodleLZ_SeekTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OodleLZ_SeekTable>(),
        48usize,
        concat!("Size of: ", stringify!(OodleLZ_SeekTable))
    );
    assert_eq!(
        ::std::mem::align_of::<OodleLZ_SeekTable>(),
        1usize,
        concat!("Alignment of ", stringify!(OodleLZ_SeekTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compressor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_SeekTable),
            "::",
            stringify!(compressor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seekChunksIndependent) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_SeekTable),
            "::",
            stringify!(seekChunksIndependent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalRawLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_SeekTable),
            "::",
            stringify!(totalRawLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalCompLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_SeekTable),
            "::",
            stringify!(totalCompLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numSeekChunks) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_SeekTable),
            "::",
            stringify!(numSeekChunks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seekChunkLen) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_SeekTable),
            "::",
            stringify!(seekChunkLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seekChunkCompLens) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_SeekTable),
            "::",
            stringify!(seekChunkCompLens)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rawCRCs) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_SeekTable),
            "::",
            stringify!(rawCRCs)
        )
    );
}
pub const OodleLZSeekTable_Flags_OodleLZSeekTable_Flags_None: OodleLZSeekTable_Flags = 0;
pub const OodleLZSeekTable_Flags_OodleLZSeekTable_Flags_MakeRawCRCs: OodleLZSeekTable_Flags = 1;
pub const OodleLZSeekTable_Flags_OodleLZSeekTable_Flags_Force32: OodleLZSeekTable_Flags =
    1073741824;
pub type OodleLZSeekTable_Flags = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct OodleConfigValues {
    pub m_OodleLZ_LW_LRM_step: OO_S32,
    pub m_OodleLZ_LW_LRM_hashLength: OO_S32,
    pub m_OodleLZ_LW_LRM_jumpbits: OO_S32,
    pub m_OodleLZ_Decoder_Max_Stack_Size: OO_S32,
    pub m_OodleLZ_Small_Buffer_LZ_Fallback_Size_Unused: OO_S32,
    pub m_OodleLZ_BackwardsCompatible_MajorVersion: OO_S32,
    pub m_oodle_header_version: OO_U32,
}
#[test]
fn bindgen_test_layout_OodleConfigValues() {
    const UNINIT: ::std::mem::MaybeUninit<OodleConfigValues> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OodleConfigValues>(),
        28usize,
        concat!("Size of: ", stringify!(OodleConfigValues))
    );
    assert_eq!(
        ::std::mem::align_of::<OodleConfigValues>(),
        1usize,
        concat!("Alignment of ", stringify!(OodleConfigValues))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_OodleLZ_LW_LRM_step) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleConfigValues),
            "::",
            stringify!(m_OodleLZ_LW_LRM_step)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_OodleLZ_LW_LRM_hashLength) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleConfigValues),
            "::",
            stringify!(m_OodleLZ_LW_LRM_hashLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_OodleLZ_LW_LRM_jumpbits) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleConfigValues),
            "::",
            stringify!(m_OodleLZ_LW_LRM_jumpbits)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).m_OodleLZ_Decoder_Max_Stack_Size) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleConfigValues),
            "::",
            stringify!(m_OodleLZ_Decoder_Max_Stack_Size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).m_OodleLZ_Small_Buffer_LZ_Fallback_Size_Unused) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleConfigValues),
            "::",
            stringify!(m_OodleLZ_Small_Buffer_LZ_Fallback_Size_Unused)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).m_OodleLZ_BackwardsCompatible_MajorVersion) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleConfigValues),
            "::",
            stringify!(m_OodleLZ_BackwardsCompatible_MajorVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_oodle_header_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleConfigValues),
            "::",
            stringify!(m_oodle_header_version)
        )
    );
}
pub const Oodle_UsageWarnings_Oodle_UsageWarnings_Enabled: Oodle_UsageWarnings = 0;
pub const Oodle_UsageWarnings_Oodle_UsageWarnings_Disabled: Oodle_UsageWarnings = 1;
pub const Oodle_UsageWarnings_Oodle_UsageWarnings_Force32: Oodle_UsageWarnings = 1073741824;
pub type Oodle_UsageWarnings = ::std::os::raw::c_uint;
pub type t_fp_OodleCore_Plugin_MallocAligned = ::std::option::Option<
    unsafe extern "C" fn(bytes: OO_SINTa, alignment: OO_S32) -> *mut ::std::os::raw::c_void,
>;
pub type t_fp_OodleCore_Plugin_Free =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
pub type t_fp_OodleCore_Plugin_RunJob = ::std::option::Option<
    unsafe extern "C" fn(
        fp_job: t_OodleFPVoidVoidStar,
        job_data: *mut ::std::os::raw::c_void,
        dependencies: *mut OO_U64,
        num_dependencies: ::std::os::raw::c_int,
        user_ptr: *mut ::std::os::raw::c_void,
    ) -> OO_U64,
>;
pub type t_fp_OodleCore_Plugin_WaitJob = ::std::option::Option<
    unsafe extern "C" fn(job_handle: OO_U64, user_ptr: *mut ::std::os::raw::c_void),
>;
pub type t_fp_OodleCore_Plugin_Printf = ::std::option::Option<
    unsafe extern "C" fn(
        verboseLevel: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ),
>;
pub type t_fp_OodleCore_Plugin_DisplayAssertion = ::std::option::Option<
    unsafe extern "C" fn(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        function: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ) -> OO_BOOL,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OodleLZDecoder {
    _unused: [u8; 0],
}
pub type OodleLZDecoder = _OodleLZDecoder;
pub const OodleLZ_CompressScratchMemBoundType_OodleLZ_CompressScratchMemBoundType_WorstCase:
    OodleLZ_CompressScratchMemBoundType = 0;
pub const OodleLZ_CompressScratchMemBoundType_OodleLZ_CompressScratchMemBoundType_Typical:
    OodleLZ_CompressScratchMemBoundType = 1;
pub const OodleLZ_CompressScratchMemBoundType_OodleLZ_CompressScratchMemBoundType_Force32:
    OodleLZ_CompressScratchMemBoundType = 1073741824;
pub type OodleLZ_CompressScratchMemBoundType = ::std::os::raw::c_uint;
pub type Function_OodleLZDecoder_Create = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: OodleLZ_Compressor,
        arg2: OO_S64,
        arg3: *mut ::std::os::raw::c_void,
        arg4: OO_SINTa,
    ) -> *mut OodleLZDecoder,
>;
pub type Function_OodleLZDecoder_Destroy =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut OodleLZDecoder)>;
pub type Function_OodleLZDecoder_DecodeSome = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut OodleLZDecoder,
        arg2: *mut OodleLZ_DecodeSome_Out,
        arg3: *mut ::std::os::raw::c_void,
        arg4: OO_SINTa,
        arg5: OO_SINTa,
        arg6: OO_SINTa,
        arg7: *const ::std::os::raw::c_void,
        arg8: OO_SINTa,
        arg9: OodleLZ_FuzzSafe,
        arg10: OodleLZ_CheckCRC,
        arg11: OodleLZ_Verbosity,
        arg12: OodleLZ_Decode_ThreadPhase,
    ) -> OO_BOOL,
>;
pub type Function_OodleLZ_Decompress = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: OO_SINTa,
        arg3: *mut ::std::os::raw::c_void,
        arg4: OO_SINTa,
        arg5: OodleLZ_FuzzSafe,
        arg6: OodleLZ_CheckCRC,
        arg7: OodleLZ_Verbosity,
        arg8: *mut ::std::os::raw::c_void,
        arg9: OO_SINTa,
        arg10: OodleDecompressCallback,
        arg11: *mut ::std::os::raw::c_void,
        arg12: *mut ::std::os::raw::c_void,
        arg13: OO_SINTa,
        arg14: OodleLZ_Decode_ThreadPhase,
    ) -> OO_SINTa,
>;
